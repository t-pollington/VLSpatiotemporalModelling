rm(list = ls())
Rx.rate = array(data = NA, dim = c(2,10))
Rx.rate
Rx.rate[1,:] = 10 # cases/mo
Rx.rate[1,] = 10 # cases/mo
Rx.rate = array(data = NA, dim = c(2,studytime)) # district-specific Rx rate
rm(list = ls())
studytime = 36 #mo. 12mo beforehand and then interruption in first yr and see what happens in second year
Rx.rate = array(data = NA, dim = c(2,studytime)) # district-specific Rx rate
Rx.rate = array(data = NA, dim = c(2,studytime), dimnames = list(1:2,1:studytime)) # district-specific Rx rate
Rx.rate
state = array(data = NA, dim = c(1,studytime), dimnames = list(1:2,1:studytime)) # district-specific Rx rate
state = array(data = NA, dim = c(1,studytime), dimnames = list(1,1:studytime)) # district-specific Rx rate
state
state = array(data = NA, dim = c(1,studytime), dimnames = list("Rx.rate",seq.int(-11,24))) # district-specific Rx rate
state
t2 = studytime - 12; t1 = t2 - studytime;
t2
t1
t2 = studytime - 12; t1 = t2 - studytime + 1;
state = array(data = NA, dim = c(1,studytime), dimnames = list("Rx.rate",seq.int(t1,t2))) # district-specific Rx rate
# rate is constant
state = 10 # cases/mo
plot(state)
state
state = array(data = NA, dim = c(1,studytime), dimnames = list("Rx.rate",seq.int(t1,t2))) # district-specific Rx rate
state
state[1,] = 10 # cases/mo
state
plot(state
plot(state)
plot(state)
names(state)
colnames(state)
integer(colnames(state))
strtoi(colnames(state))
plot(x = strtoi(colnames(state)), y = state, type = "l")
plot(x = strtoi(colnames(state)), y = state, type = "o")
plot(x = strtoi(colnames(state)), y = state, type = "o")
axis(2,pos = 0)
plot.new()
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n")
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n")
axis(2,pos = 0)
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i")
axis(2,pos = 0)
t2
t1
state[1:12 + abs(t1),] = 0 # interruption
1:12 + abs(t1)
state[(1:12 + abs(t1)),] = 0 # interruption
state[(1:12 + abs(t1)),]
state
state[(1:12 + abs(t1))]
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i")
axis(2,pos = 0)
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate")
axis(2,pos = 0)
Rx.thresh = 12 # cases/mo
# rate is constant----
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)", ylim = c(0,Rx.thresh))
axis(2,pos = 0)
abline(v = Rx.thresh)
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)", ylim = c(0,Rx.thresh+2))
axis(2,pos = 0)
abline(v = Rx.thresh, lty = 2)
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)", ylim = c(0,Rx.thresh+2))
axis(2,pos = 0)
abline(h = Rx.thresh, lty = 2)
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)",
ylim = c(0,Rx.thresh+2), col = "blue")
axis(2,pos = 0)
abline(h = Rx.thresh, lty = 2)
Rx.thresh = 10
# rate is constant----
state[1,] = 10 # cases/mo
state[(1:12 + abs(t1))] = 0 # interruption
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)",
ylim = c(0,Rx.thresh+2), col = "blue")
axis(2,pos = 0)
abline(h = Rx.thresh, lty = 2)
length(20:10)
state[1:11,] = 20:10 # descending Rx.rate in preceding 11 mo as case count falls
state[(1:12 + abs(t1))] = 0 # interruption
Rx.thresh = max(state[1:11]) # Rx.thresh defined as maximum counts seen in last 11 mo
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)",
ylim = c(0,Rx.thresh+2), col = "blue")
axis(2,pos = 0)
abline(h = Rx.thresh, lty = 2)
state[1:11] = 20:10 # descending Rx.rate in preceding 11 mo as case count falls
state[(1:12 + abs(t1))] = 0 # interruption
Rx.thresh = max(state[1:11]) # Rx.thresh defined as maximum counts seen in last 11 mo
plot(x = strtoi(colnames(state)), y = state, type = "o", yaxt = "n", xaxs = "i",
yaxs = "i", xlab = "time (mo)", ylab = "treatment rate (cases/mo)",
ylim = c(0,Rx.thresh+2), col = "blue")
axis(2,pos = 0)
abline(h = Rx.thresh, lty = 2)
# R 4.0.5
rm(list = ls())
library(magrittr) # %>%
library(scales) # alpha()
actualdir = "C:/Users/timpo/OneDrive - University of Warwick/VLIBM1/pj_files"
bigfiledir = "C:/Users/timpo/OneDrive - University of Warwick/LACCsimcode_original"
setwd(actualdir)
# import in
actual = read.csv(file = "data_final2.csv")[,c("KA","PARA","KA_1210")]
actualKA = actual[actual$KA_1210 & !is.na(actual$KA) & actual$KA>=504,]
study_time = 504:(504+108-1)
actualKA_count = table(factor(actualKA$KA, levels = study_time))
actualKA_para = list()
for (i in 1:19) {
actualKA_para[[i]] = table(factor(actual[actual$KA_1210 & !is.na(actual$KA) &
actual$KA>=504 &
actual$PARA==i,]$KA, levels = study_time))
}
# calc countI.study.mean----
setwd(bigfiledir)
extractData <- function(filename, name, justbeta1 = TRUE, para = FALSE,
whichbeta = NULL) {
filename %>% rhdf5::h5read(name = name) -> x
if(justbeta1){
x[,,,1] -> x
}
else{
x[,,,whichbeta] -> x
}
x.para.mean = NULL
x %>% apply(c(1,2), sum) -> x.study
x.study %>% apply(1, mean) -> x.study.mean
x -> x.para
x %>% apply(c(1,3), mean) -> x.para.mean
return(list(x.study,x.study.mean,x.para,x.para.mean))
}
extractData1 <- function(filename, name, justbeta1 = TRUE, para = FALSE,
whichbeta = NULL) { # change to allow new stuff from LACCsimcode_original
filename %>% rhdf5::h5read(name = name) -> x
x.para.mean = NULL
x %>% apply(c(1,2), sum) -> x.study
x.study %>% apply(1, mean) -> x.study.mean
x -> x.para
x %>% apply(c(1,3), mean) -> x.para.mean
return(list(x.study,x.study.mean,x.para,x.para.mean))
}
study = "betaoncecommit2af5207distributednsmpls100nsims10_incA.jld"
A.study = extractData(study, "incAsave")[[1]]
A.study.mean = extractData(study, "incAsave")[[2]]
A.para = extractData(study, "incAsave")[[3]]
A.para.mean = extractData(study, "incAsave")[[4]]
study = "betaoncecommit2af5207distributednsmpls100nsims10_incE.jld"
E.study = extractData(study, "incEsave")[[1]]
E.study.mean = extractData(study, "incEsave")[[2]]
E.para = extractData(study, "incEsave")[[3]]
E.para.mean = extractData(study, "incEsave")[[4]]
study = "betaoncecommit2af5207distributednsmpls100nsims10_incI.jld"
I.study = extractData(study, "incIsave")[[1]]
I.study.mean = extractData(study, "incIsave")[[2]]
I.para = extractData(study, "incIsave")[[3]]
I.para.mean = extractData(study, "incIsave")[[4]]
study = "betaoncecommit2af5207distributednsmpls100nsims10_incD.jld"
D.study = extractData(study, "incDsave")[[1]]
D.study.mean = extractData(study, "incDsave")[[2]]
D.para = extractData(study, "incDsave")[[3]]
D.para.mean = extractData(study, "incDsave")[[4]]
study = "betaoncecommit2af5207distributednsmpls100nsims10_incP.jld"
P.study = extractData(study, "incPsave")[[1]]
P.study.mean = extractData(study, "incPsave")[[2]]
P.para = extractData(study, "incPsave")[[3]]
P.para.mean = extractData(study, "incPsave")[[4]]
setwd("C:/Users/timpo/OneDrive - University of Warwick/LACCsimcode_original")
study = "incA100_10LACCoriginal.jld"
A.study.orig = extractData1(study, "incA", justbeta1 = TRUE)[[1]]
A.study.mean.orig = extractData1(study, "incA")[[2]]
A.para.orig = extractData1(study, "incA")[[3]]
A.para.mean.orig = extractData1(study, "incA")[[4]]
study = "incI100_10LACCoriginal.jld"
I.study.orig = extractData1(study, "incI")[[1]]
I.study.mean.orig = extractData1(study, "incI")[[2]]
I.para.orig = extractData1(study, "incI")[[3]]
I.para.mean.orig = extractData1(study, "incI")[[4]]
study = "incP100_10LACCoriginal.jld"
P.study.orig = extractData1(study, "incP")[[1]]
P.study.mean.orig = extractData1(study, "incP")[[2]]
P.para.orig = extractData1(study, "incP")[[3]]
P.para.mean.orig = extractData1(study, "incP")[[4]]
study = "incA100_10LACCoriginalfixdeathemierror.jld"
A.study.orig.fix = extractData1(study, "incA")[[1]]
A.study.mean.orig.fix = extractData1(study, "incA")[[2]]
A.para.orig.fix = extractData1(study, "incA")[[3]]
A.para.mean.orig.fix = extractData1(study, "incA")[[4]]
study = "incI100_10LACCoriginalfixdeathemierror.jld"
I.study.orig.fix = extractData1(study, "incI")[[1]]
I.study.mean.orig.fix = extractData1(study, "incI")[[2]]
I.para.orig.fix = extractData1(study, "incI")[[3]]
I.para.mean.orig.fix = extractData1(study, "incI")[[4]]
study = "incP100_10LACCoriginalfixdeathemierror.jld"
P.study.orig.fix = extractData1(study, "incP")[[1]]
P.study.mean.orig.fix = extractData1(study, "incP")[[2]]
P.para.orig.fix = extractData1(study, "incP")[[3]]
P.para.mean.orig.fix = extractData1(study, "incP")[[4]]
# table of para incidence 2003--2010 to compare with Chapman et al Table S7
I.para.sum_t = apply(X = I.para, c(2,3), sum) #2003--2010
I.para.sum_t.orig = apply(X = I.para.orig, c(2,3), sum) #2003--2010
I.para.sum_t.orig.fix = apply(X = I.para.orig.fix, c(2,3), sum) #2003--2010
# 2002--2010
for (i in 1:19) {
I.para.sum_t[,i] = I.para.sum_t[,i] + sum(actualKA_para[[i]][1:12])
I.para.sum_t.orig[,i] = I.para.sum_t.orig[,i] + sum(actualKA_para[[i]][1:12])
I.para.sum_t.orig.fix[,i] = I.para.sum_t.orig.fix[,i] + sum(actualKA_para[[i]][1:12])
}
I.para.mean.sum_t = apply(X = I.para.sum_t, 2, mean)
I.para.mean.sum_t.orig = apply(X = I.para.sum_t.orig, 2, mean)
I.para.mean.sum_t.orig.fix = apply(X = I.para.sum_t.orig.fix, 2, mean)
for (i in 1:19) {
print(paste0(sum(actualKA_para[[i]][1:108]),", ",round(I.para.mean.sum_t[i]),", ",round(I.para.mean.sum_t.orig[i]),", ",round(I.para.mean.sum_t.orig.fix[i])))
}
# which sims were still creating incident cases in any of the months 580 onwards?
stillgoingstrong = apply(X = I.study.orig.fix[77:96,],2, function(X) any(X>0))
sum(stillgoingstrong) #1000/1000!
# which sims had no zero cases up to but not incl month 580?
onlyposcasesupto580 = apply(X = I.study.orig.fix[1:76,],2, function(X) all(X>0))
sum(onlyposcasesupto580) #920/1000!
# compare cumulative case counts
sum(actualKA_count[13:96]) #968
# plot study count. I.study shifted as starts Jan 2003(516) not 2002(504)
pdf(file = "count_wholestudy.pdf")
plot(NULL, xlim = range(study_time),
ylim = c(0,max(I.study.mean.orig.fix[1:84],actualKA_count[1:96],I.study.orig.fix[1:84,])),
xaxs = "i", yaxs = "i", xlab = "month no.", ylab = "incident case count",
main = "Whole study")
for (i in 1:dim(I.study.orig.fix)[2]) {
lines(x = study_time, y = c(rep(NA,12),I.study.orig.fix[1:84,i],rep(NA,12)),
col = alpha("lightgrey",0.05))
}
lines(x = study_time, y = c(rep(NA,12),I.study.orig.fix[1:84,1],rep(NA,12)),
col = "red")
abline(v=(504+12), lty = 3)
lines(x = study_time, y = c(rep(NA,12),I.study.mean.orig.fix[1:84],rep(NA,12)), col = "blue")
lines(x = study_time, y = actualKA_count, col = "black")
dev.off()
# calc countI.study.mean by para----
setwd(bigfiledir)
extractDataPara <- function(filename, name, justbeta1 = TRUE, para = FALSE,
whichbeta = NULL) {
filename %>% rhdf5::h5read(name = name) -> x
if(justbeta1){
x[,,1] -> x
}
x -> x.para
x %>% apply(1, mean) -> x.para.mean
return(list(x.para,x.para.mean))
}
for (i in c(1,3,4,5,6,8,9,10,11,13,15,16,19)) {
study = paste0("inci100_10LACCoriginalpara",i,".jld")
I.para.mean = extractDataPara(study, "incI")[[2]]
print(paste0("para = ",i,", ,mean = ",round(sum(I.para.mean)+sum(actualKA_para[[i]][1:12]))))
}
install.packages("BiocManager")
BiocManager::install("rhdf5")
